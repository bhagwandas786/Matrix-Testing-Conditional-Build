name: Matrix Testing & Conditional Build

on:
  push:
    branches: [main]
    tags: ["v*.*.*"]
  pull_request:
    branches: [main]
  schedule:
    - cron: "0 2 * * *"   # Nightly test run at 2 AM UTC
  workflow_dispatch:
    inputs:
      skip_build:
        description: "Skip build step?"
        required: false
        default: "false"
        type: boolean

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  test:
    name: Test on Node ${{ matrix.node }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node: [16, 18, 20]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run tests with JSON output
        run: |
          mkdir -p test-results/${{ matrix.node }}
          npm test -- --json --outputFile=test-results/${{ matrix.node }}/results.json

      - name: Upload test results
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ matrix.node }}
          path: test-results/${{ matrix.node }}
          retention-days: 7

  summary:
    name: Generate Test Summary
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Download all test results
        uses: actions/download-artifact@v4
        with:
          pattern: test-results-*
          path: downloaded-test-results

      - name: Concatenate and analyze results
        run: |
          mkdir -p test-results-summary
          
          # Process each Node version's results
          TOTAL_TESTS=0
          for node_version in 16 18 20; do
            if [ -f "downloaded-test-results/test-results-$node_version/results.json" ]; then
              # Extract test count for this Node version
              COUNT=$(jq '.numPassedTests + .numFailedTests + .numPendingTests' "downloaded-test-results/test-results-$node_version/results.json")
              TOTAL_TESTS=$((TOTAL_TESTS + COUNT))
              
              # Add to summary
              echo "Node.js $node_version: $COUNT tests" >> test-results-summary/summary.txt
              jq '{node: $node, result: .}' --arg node "$node_version" "downloaded-test-results/test-results-$node_version/results.json" >> test-results-summary/detailed.json
            fi
          done
          
          echo "Total tests across all Node versions: $TOTAL_TESTS" >> test-results-summary/summary.txt
          echo "TOTAL_TESTS=$TOTAL_TESTS" >> $GITHUB_ENV
          echo "$TOTAL_TESTS" > test-results-summary/total-count.txt

      - name: Upload summary
        uses: actions/upload-artifact@v4
        with:
          name: test-results-summary
          path: test-results-summary

  regression-check:
    name: Check Regression in Test Count
    runs-on: ubuntu-latest
    needs: summary
    steps:
      - name: Download summary
        uses: actions/download-artifact@v4
        with:
          name: test-results-summary
          path: test-results-summary

      - name: Validate test count
        run: |
          CURRENT_COUNT=$(cat test-results-summary/total-count.txt)
          echo "Current test count: $CURRENT_COUNT"
          
          MIN_COUNT=5
          if [ "$CURRENT_COUNT" -lt "$MIN_COUNT" ]; then
            echo "❌ Regression detected: Test count ($CURRENT_COUNT) is below minimum ($MIN_COUNT)"
            exit 1
          else
            echo "✅ Test count meets minimum requirement: $CURRENT_COUNT >= $MIN_COUNT"
          fi

  build:
    name: Build Project
    runs-on: ubuntu-latest
    needs: [test, summary, regression-check]
    if: |
      (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v')) &&
      (!contains(github.event.inputs.skip_build, 'true'))
    environment:
      name: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build
        run: |
          mkdir -p dist
          npm run build
          echo "Build completed at $(date)" > dist/build-info.txt

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: build-dist
          path: dist
          retention-days: 30

  nightly-test:
    name: Nightly Test (Node Current)
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js Current
        uses: actions/setup-node@v4
        with:
          node-version: current
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run tests
        run: |
          mkdir -p nightly-test-results
          npm test -- --json --outputFile=nightly-test-results/results.json

      - name: Upload nightly test results
        uses: actions/upload-artifact@v4
        with:
          name: nightly-test-results
          path: nightly-test-results
          retention-days: 7

  # Optional: Manual approval step (uncomment if needed)
  # approval:
  #   name: Manual Approval
  #   runs-on: ubuntu-latest
  #   needs: build
  #   if: success()
  #   steps:
  #     - name: Wait for manual approval
  #       run: |
  #         echo "Manual approval would be required here in production"
  #         echo "Simulating approval for demonstration"
